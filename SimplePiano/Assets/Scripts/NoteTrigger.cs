using UnityEngine;

public class NoteTrigger : MonoBehaviour
{
    public string expectedNote; // La note √† attendre (ex: "C4")

    private NoteMover noteInZone;
    private GameObject noteObject; // R√©f√©rence √† l'objet note (enfant du pivot)
    private KeyCode expectedKey;
    private bool debugKeyPressed = false;

    void Start()
    {
        // R√©cup√©rer la touche correspondante √† la note attendue
        expectedKey = KeyMapper.GetKeyForNote(expectedNote);
        Debug.Log($"NoteTrigger pour {expectedNote} initialis√© - Touche attendue: {expectedKey}");
        
        // V√©rifier que le trigger a bien un collider
        if (GetComponent<Collider>() == null)
        {
            Debug.LogError($"Le NoteTrigger pour {expectedNote} n'a pas de Collider! Ajout automatique...");
            BoxCollider col = gameObject.AddComponent<BoxCollider>();
            col.size = new Vector3(0.2f, 0.2f, 0.5f);
            col.isTrigger = true;
        }
        else if (!GetComponent<Collider>().isTrigger)
        {
            Debug.LogWarning($"Le Collider du NoteTrigger pour {expectedNote} n'est pas en mode Trigger!");
            GetComponent<Collider>().isTrigger = true;
        }
    }

    void OnTriggerEnter(Collider other)
    {
        Debug.Log($"‚ö° Collision d√©tect√©e sur {expectedNote} avec {other.gameObject.name}");
        
        // V√©rifier si c'est un pivot de note qui entre dans la zone
        NoteMover mover = other.GetComponent<NoteMover>();
        if (mover != null && mover.noteName == expectedNote && !mover.hasBeenHit)
        {
            noteInZone = mover;
            mover.isInHitZone = true;
            
            // Stocker une r√©f√©rence au premier enfant (l'objet note)
            if (other.transform.childCount > 0)
            {
                noteObject = other.transform.GetChild(0).gameObject;
            }
            
            Debug.Log($"üéπ Note {expectedNote} pr√™te √† √™tre jou√©e avec la touche {expectedKey}");
        }
    }

    void OnTriggerExit(Collider other)
    {
        NoteMover mover = other.GetComponent<NoteMover>();
        if (mover == noteInZone && !mover.hasBeenHit)
        {
            mover.isInHitZone = false;
            noteInZone = null;
            noteObject = null;
            Debug.Log($"‚ùå MISS: {expectedNote} left the hit zone without being played.");
        }
    }

    void Update()
    {
        // Test sp√©cifique pour cette note - appuyez sur la touche Tab pour frapper n'importe quelle note
        if (Input.GetKeyDown(KeyCode.Tab) && noteInZone != null)
        {
            Debug.Log($"üî® For√ßage de frappe avec Tab pour {expectedNote}");
            PlayNote();
            return;
        }
    
        // D√©tection normale de la touche associ√©e √† cette note
        if (Input.GetKeyDown(expectedKey))
        {
            Debug.Log($"‚å®Ô∏è Touche {expectedKey} pour note {expectedNote} enfonc√©e!");
            debugKeyPressed = true;
            
            // Si une note est dans la zone, la jouer
            if (noteInZone != null)
            {
                PlayNote();
            }
        }
    }
    
    // M√©thode s√©par√©e pour jouer la note
    private void PlayNote()
    {
        if (noteInZone != null)
        {
            Debug.Log($"‚úÖ HIT! Played note: {expectedNote} with key {expectedKey}");
            
            // Utiliser la m√©thode Hit() du NoteMover
            noteInZone.Hit();
            
            // R√©initialiser les r√©f√©rences
            noteInZone = null;
            noteObject = null;
        }
    }
}
